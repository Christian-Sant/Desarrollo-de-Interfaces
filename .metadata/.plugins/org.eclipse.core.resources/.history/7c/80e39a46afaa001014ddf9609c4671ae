package primero;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSlider;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;

public class PracticaEvaluativadeDesarrollodeInterfacesRA1 extends JFrame {
//CHRISTIAN JAY LAGO
	private static final long serialVersionUID = 1L;
	private MiPanel contentPane;
	private BufferedImage ventana;
	private Graphics2D grafico;
	private int x,y;
	private Color colorActual = Color.BLACK;
	private JSlider slider;
	private int grosor;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					PracticaEvaluativadeDesarrollodeInterfacesRA1 frame = new PracticaEvaluativadeDesarrollodeInterfacesRA1();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public PracticaEvaluativadeDesarrollodeInterfacesRA1() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 700, 500);
		contentPane = new MiPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		
		JMenu mnNewMenu = new JMenu("Herramientas de Dibujo");
		menuBar.add(mnNewMenu);
		
		JMenuItem mntmColor = new JMenuItem("Selecciona el Color");
		mntmColor.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Color colorNuevo = JColorChooser.showDialog(mntmColor, "Selecciona un color", colorActual);
				if(colorNuevo != null) {
					colorActual = colorNuevo;
				}
			}
		});
		mnNewMenu.add(mntmColor);
		
		JMenuItem mntmLimpiar = new JMenuItem("Limpiar Lienzo");
		mntmLimpiar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				contentPane.repaint();
			}
		});
		mnNewMenu.add(mntmLimpiar);
		
		JMenu mnGrosor = new JMenu("Grosor");
		mnNewMenu.add(mnGrosor);
		
		slider = new JSlider();
		slider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent e) {
				grafico.setColor(Color.WHITE);
				grafico.fillRect(0, 0, ventana.getWidth(), ventana.getHeight());
			}
		});
		slider.setMajorTickSpacing(1);
		slider.setPaintTicks(true);
		slider.setValue(10);
		slider.setMaximum(20);
		slider.setMinimum(1);
		mnGrosor.add(slider);
		getContentPane().addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseDragged(MouseEvent e) {
				x = e.getX();
				y = e.getY();
				dibujar(x,y);
			}
		});
		getContentPane().addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				x = e.getX();
				y = e.getY();
				dibujar(x,y);
			}
		});

		ventana = new BufferedImage(700, 500, BufferedImage.TYPE_INT_RGB);
		grafico = ventana.createGraphics();
		grafico.setColor(Color.WHITE);
		grafico.fillRect(0, 0, ventana.getWidth(), ventana.getHeight());
		
	}
	private void dibujar(int x, int y) {
		grafico.setColor(colorActual);
		grafico.fillOval(x - grosor/2, y - grosor/2, grosor,grosor);
		contentPane.repaint();
	}
	private class MiPanel extends JPanel {
		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			g.drawImage(ventana, 0,0, null);
		}
	}
}
