package primero;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GraphicsEnvironment;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JTextArea;
import javax.swing.JSpinner;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.SpinnerNumberModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.JLabel;

public class EditorDeTextos extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JSpinner spinner;
	private JComboBox comboBoxFont;
	private String seleccionado;
	private JCheckBoxMenuItem chckbxmntmCursiva;
	private JCheckBoxMenuItem chckbxmntmNegrita;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					EditorDeTextos frame = new EditorDeTextos();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public EditorDeTextos() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 794, 569);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		this.setLocationRelativeTo(null);

		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JTextArea textArea = new JTextArea();
		textArea.setBounds(0, 28, 579, 502);
		textArea.setFont(new Font("Arial", Font.PLAIN, 12));
		contentPane.add(textArea);
		
		
		JScrollPane scrollPane = new JScrollPane(textArea);
		scrollPane.setBounds(0, 28, 579, 502);
		contentPane.add(scrollPane);
		
		
		
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(0, 0, 778, 30);
		contentPane.add(menuBar);
		JMenu mnArchivo = new JMenu("Archivo");
		menuBar.add(mnArchivo);
		
		JMenuItem mntmNuevo = new JMenuItem("Nuevo");
		mntmNuevo.addActionListener(new ActionListener() {
			//Se borra todo el textArea para se pueda escribir desde el principio
			public void actionPerformed(ActionEvent e) {
				textArea.setText("");
				spinner.setValue(12);
				comboBoxFont.setSelectedItem(" ");
			}
		});
		mnArchivo.add(mntmNuevo);
		
		JMenuItem mntmSalir = new JMenuItem("Salir");
		mntmSalir.addActionListener(new ActionListener() {
			//Se cierra el programa
			public void actionPerformed(ActionEvent e) {
				System.exit(1);
			}
		});
		mnArchivo.add(mntmSalir);
		
		JMenu mnNewMenu = new JMenu("Estilo");
		menuBar.add(mnNewMenu);
		chckbxmntmNegrita = new JCheckBoxMenuItem("Negrita");
		chckbxmntmNegrita.addActionListener(new ActionListener() {
			//Vemos si se ha seleccionado la negrita y cursiva. Lo ponemos si se ha seleccionado
			public void actionPerformed(ActionEvent e) {
				if(!chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
				
					textArea.setFont(new Font(seleccionado, 1, (int) spinner.getValue()));
				}
				else if(!chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
			
					textArea.setFont(new Font(seleccionado, 0, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 1 | 2, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 2, (int) spinner.getValue()));
				}
			}
		});
		mnNewMenu.add(chckbxmntmNegrita);
		
		chckbxmntmCursiva = new JCheckBoxMenuItem("Cursiva");
		chckbxmntmCursiva.addActionListener(new ActionListener() {
			//Vemos si se ha seleccionado la negrita y cursiva. Lo ponemos si se ha seleccionado
			public void actionPerformed(ActionEvent e) {
				if(!chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					
					textArea.setFont(new Font(seleccionado, 1, (int) spinner.getValue()));
				}
				else if(!chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
			
					textArea.setFont(new Font(seleccionado, 0, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 1 | 2, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 2, (int) spinner.getValue()));
				}
			}
		});
		
		mnNewMenu.add(chckbxmntmCursiva);
		
		spinner = new JSpinner();
		spinner.addChangeListener(new ChangeListener() {
			//Vemos si se ha seleccionado la negrita y cursiva. Lo ponemos si se ha seleccionado
			public void stateChanged(ChangeEvent e) {
				if(!chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					
					textArea.setFont(new Font(seleccionado, 1, (int) spinner.getValue()));
				}
				else if(!chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
			
					textArea.setFont(new Font(seleccionado, 0, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 1 | 2, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 2, (int) spinner.getValue()));
				}
			}
		});
		spinner.setModel(new SpinnerNumberModel(Integer.valueOf(12), null, null, Integer.valueOf(1)));
		spinner.setBounds(587, 67, 195, 20);
		contentPane.add(spinner);
		
		String[] familyFont = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
		
		comboBoxFont = new JComboBox();
		comboBoxFont.setModel(new DefaultComboBoxModel(new String[] {" "}));
		comboBoxFont.setFont(new Font("Arial", Font.PLAIN, 15));
		//Se añade todas las Fuentes
		for(int i = 0; i < familyFont.length; i++) {
			comboBoxFont.addItem(familyFont[i]);
		}
		String nuevo = "";
		comboBoxFont.addActionListener(new ActionListener() {
			//Guardamos en un variable el Font Seleccionado
			//Vemos si se ha seleccionado la negrita y cursiva. Lo ponemos si se ha seleccionado
			public void actionPerformed(ActionEvent e) {
				seleccionado = (String) comboBoxFont.getSelectedItem();
				if(!chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 1, (int) spinner.getValue()));
				}
				else if(!chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
			
					textArea.setFont(new Font(seleccionado, 0, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 1 | 2, (int) spinner.getValue()));
				}
				else if(chckbxmntmCursiva.isSelected() & !chckbxmntmNegrita.isSelected()) {
					textArea.setFont(new Font(seleccionado, 2, (int) spinner.getValue()));
				}
			}
		});
		
		comboBoxFont.setBounds(587, 128, 191, 22);
		contentPane.add(comboBoxFont);
		
		JLabel lblNewLabel = new JLabel("TAMAÑO");
		lblNewLabel.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblNewLabel.setBounds(587, 52, 123, 14);
		contentPane.add(lblNewLabel);
		
		JLabel lblTipoDeLetra = new JLabel("TIPO DE LETRA");
		lblTipoDeLetra.setFont(new Font("Tahoma", Font.BOLD, 11));
		lblTipoDeLetra.setBounds(587, 114, 123, 14);
		contentPane.add(lblTipoDeLetra);
		
		
	}
}
